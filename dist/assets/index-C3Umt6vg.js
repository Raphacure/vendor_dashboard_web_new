var K=e=>{throw TypeError(e)};var g=(e,t,s)=>t.has(e)||K("Cannot "+s);var i=(e,t,s)=>(g(e,t,"read from private field"),s?s.call(e):t.get(e)),m=(e,t,s)=>t.has(e)?K("Cannot add the same private member more than once"):t instanceof WeakSet?t.add(e):t.set(e,s),p=(e,t,s,r)=>(g(e,t,"write to private field"),r?r.call(e,s):t.set(e,s),s),f=(e,t,s)=>(g(e,t,"access private method"),s);import{aS as U,aT as D,aU as R,aV as V,aW as T,aQ as k,r as l,aX as q,aY as L}from"./index-PsMG3Zdc.js";var u,c,o,a,h,S,C,w,Q=(w=class extends U{constructor(t,s){super();m(this,h);m(this,u);m(this,c);m(this,o);m(this,a);p(this,u,t),this.setOptions(s),this.bindMethods(),f(this,h,S).call(this)}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(t){var r;const s=this.options;this.options=i(this,u).defaultMutationOptions(t),D(this.options,s)||i(this,u).getMutationCache().notify({type:"observerOptionsUpdated",mutation:i(this,o),observer:this}),s!=null&&s.mutationKey&&this.options.mutationKey&&R(s.mutationKey)!==R(this.options.mutationKey)?this.reset():((r=i(this,o))==null?void 0:r.state.status)==="pending"&&i(this,o).setOptions(this.options)}onUnsubscribe(){var t;this.hasListeners()||(t=i(this,o))==null||t.removeObserver(this)}onMutationUpdate(t){f(this,h,S).call(this),f(this,h,C).call(this,t)}getCurrentResult(){return i(this,c)}reset(){var t;(t=i(this,o))==null||t.removeObserver(this),p(this,o,void 0),f(this,h,S).call(this),f(this,h,C).call(this)}mutate(t,s){var r;return p(this,a,s),(r=i(this,o))==null||r.removeObserver(this),p(this,o,i(this,u).getMutationCache().build(i(this,u),this.options)),i(this,o).addObserver(this),i(this,o).execute(t)}},u=new WeakMap,c=new WeakMap,o=new WeakMap,a=new WeakMap,h=new WeakSet,S=function(){var s;const t=((s=i(this,o))==null?void 0:s.state)??V();p(this,c,{...t,isPending:t.status==="pending",isSuccess:t.status==="success",isError:t.status==="error",isIdle:t.status==="idle",mutate:this.mutate,reset:this.reset})},C=function(t){T.batch(()=>{var s,r,n,y,d,v,E,x;if(i(this,a)&&this.hasListeners()){const b=i(this,c).variables,O=i(this,c).context,M={client:i(this,u),meta:this.options.meta,mutationKey:this.options.mutationKey};(t==null?void 0:t.type)==="success"?((r=(s=i(this,a)).onSuccess)==null||r.call(s,t.data,b,O,M),(y=(n=i(this,a)).onSettled)==null||y.call(n,t.data,null,b,O,M)):(t==null?void 0:t.type)==="error"&&((v=(d=i(this,a)).onError)==null||v.call(d,t.error,b,O,M),(x=(E=i(this,a)).onSettled)==null||x.call(E,void 0,t.error,b,O,M))}this.listeners.forEach(b=>{b(i(this,c))})})},w);function I(e,t){const s=k(),[r]=l.useState(()=>new Q(s,e));l.useEffect(()=>{r.setOptions(e)},[r,e]);const n=l.useSyncExternalStore(l.useCallback(d=>r.subscribe(T.batchCalls(d)),[r]),()=>r.getCurrentResult(),()=>r.getCurrentResult()),y=l.useCallback((d,v)=>{r.mutate(d,v).catch(q)},[r]);if(n.error&&L(r.options.throwOnError,[n.error]))throw n.error;return{...n,mutate:y,mutateAsync:n.mutate}}function P(e,t){const[s,r]=l.useState(e);return l.useEffect(()=>{const n=setTimeout(()=>{r(e)},t);return()=>{clearTimeout(n)}},[e,t]),s}export{P as a,I as u};
